/* tslint:disable */
/* eslint-disable */
/**
 * upload-api
 * Upload API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@upload.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// @ts-ignore
import * as runtime from "../runtime";
import type {
  // @ts-ignore
  BeginMultipartUploadRequest,
  // @ts-ignore
  BeginMultipartUploadResponse,
  // @ts-ignore
  CompleteUploadPartRequest,
  // @ts-ignore
  ErrorResponse,
  // @ts-ignore
  UploadPart,
  // @ts-ignore
  UploadPartList
} from "../models";

export interface BeginMultipartUploadOperationParams {
  accountId: string;
  beginMultipartUploadRequest: BeginMultipartUploadRequest;
}

export interface CompleteUploadPartOperationParams {
  accountId: string;
  uploadId: string;
  uploadPartIndex: number;
  completeUploadPartRequest: CompleteUploadPartRequest;
}

export interface GetUploadPartParams {
  accountId: string;
  uploadId: string;
  uploadPartIndex: number;
}

export interface ListUploadPartsParams {
  accountId: string;
  uploadId: string;
}

/**
 *
 */
export class UploadApi extends runtime.BaseAPI {
  /**
   * Begins a new multipart file upload process.
   */
  private async beginMultipartUploadWithHttpInfo(
    requestParameters: BeginMultipartUploadOperationParams,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<BeginMultipartUploadResponse>> {
    if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling beginMultipartUpload."
      );
    }

    if (
      requestParameters.beginMultipartUploadRequest === null ||
      requestParameters.beginMultipartUploadRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "beginMultipartUploadRequest",
        "Required parameter requestParameters.beginMultipartUploadRequest was null or undefined when calling beginMultipartUpload."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authorization-header authentication
    }

    const operationBasePathOverride = [][0];

    const response = await this.request(
      {
        path: `/v2/accounts/{accountId}/uploads`.replace(
          `{${"accountId"}}`,
          // @ts-ignore
          "accountId" === "filePath"
            ? String(requestParameters.accountId).substr(1)
            : encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.beginMultipartUploadRequest
      },
      initOverrides,
      operationBasePathOverride
    );

    return new runtime.JSONApiResponse(response);
  }

  /**
   * Begins a new multipart file upload process.
   */
  async beginMultipartUpload(
    requestParameters: BeginMultipartUploadOperationParams,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<BeginMultipartUploadResponse> {
    const response = await this.beginMultipartUploadWithHttpInfo(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Marks an upload part as uploaded.  You must call this endpoint after you have successfully issued a `PUT` request to the `uploadUrl` on the corresponding UploadPart.
   */
  private async completeUploadPartWithHttpInfo(
    requestParameters: CompleteUploadPartOperationParams,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling completeUploadPart."
      );
    }

    if (requestParameters.uploadId === null || requestParameters.uploadId === undefined) {
      throw new runtime.RequiredError(
        "uploadId",
        "Required parameter requestParameters.uploadId was null or undefined when calling completeUploadPart."
      );
    }

    if (requestParameters.uploadPartIndex === null || requestParameters.uploadPartIndex === undefined) {
      throw new runtime.RequiredError(
        "uploadPartIndex",
        "Required parameter requestParameters.uploadPartIndex was null or undefined when calling completeUploadPart."
      );
    }

    if (
      requestParameters.completeUploadPartRequest === null ||
      requestParameters.completeUploadPartRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "completeUploadPartRequest",
        "Required parameter requestParameters.completeUploadPartRequest was null or undefined when calling completeUploadPart."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authorization-header authentication
    }

    const operationBasePathOverride = [][0];

    const response = await this.request(
      {
        path: `/v2/accounts/{accountId}/uploads/{uploadId}/parts/{uploadPartIndex}`
          .replace(
            `{${"accountId"}}`,
            // @ts-ignore
            "accountId" === "filePath"
              ? String(requestParameters.accountId).substr(1)
              : encodeURIComponent(String(requestParameters.accountId))
          )
          .replace(
            `{${"uploadId"}}`,
            // @ts-ignore
            "uploadId" === "filePath"
              ? String(requestParameters.uploadId).substr(1)
              : encodeURIComponent(String(requestParameters.uploadId))
          )
          .replace(
            `{${"uploadPartIndex"}}`,
            // @ts-ignore
            "uploadPartIndex" === "filePath"
              ? String(requestParameters.uploadPartIndex).substr(1)
              : encodeURIComponent(String(requestParameters.uploadPartIndex))
          ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.completeUploadPartRequest
      },
      initOverrides,
      operationBasePathOverride
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Marks an upload part as uploaded.  You must call this endpoint after you have successfully issued a `PUT` request to the `uploadUrl` on the corresponding UploadPart.
   */
  async completeUploadPart(
    requestParameters: CompleteUploadPartOperationParams,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.completeUploadPartWithHttpInfo(requestParameters, initOverrides);
  }

  /**
   * Gets a remaining upload part for a multipart file upload.
   */
  private async getUploadPartWithHttpInfo(
    requestParameters: GetUploadPartParams,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UploadPart>> {
    if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling getUploadPart."
      );
    }

    if (requestParameters.uploadId === null || requestParameters.uploadId === undefined) {
      throw new runtime.RequiredError(
        "uploadId",
        "Required parameter requestParameters.uploadId was null or undefined when calling getUploadPart."
      );
    }

    if (requestParameters.uploadPartIndex === null || requestParameters.uploadPartIndex === undefined) {
      throw new runtime.RequiredError(
        "uploadPartIndex",
        "Required parameter requestParameters.uploadPartIndex was null or undefined when calling getUploadPart."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authorization-header authentication
    }

    const operationBasePathOverride = [][0];

    const response = await this.request(
      {
        path: `/v2/accounts/{accountId}/uploads/{uploadId}/parts/{uploadPartIndex}`
          .replace(
            `{${"accountId"}}`,
            // @ts-ignore
            "accountId" === "filePath"
              ? String(requestParameters.accountId).substr(1)
              : encodeURIComponent(String(requestParameters.accountId))
          )
          .replace(
            `{${"uploadId"}}`,
            // @ts-ignore
            "uploadId" === "filePath"
              ? String(requestParameters.uploadId).substr(1)
              : encodeURIComponent(String(requestParameters.uploadId))
          )
          .replace(
            `{${"uploadPartIndex"}}`,
            // @ts-ignore
            "uploadPartIndex" === "filePath"
              ? String(requestParameters.uploadPartIndex).substr(1)
              : encodeURIComponent(String(requestParameters.uploadPartIndex))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides,
      operationBasePathOverride
    );

    return new runtime.JSONApiResponse(response);
  }

  /**
   * Gets a remaining upload part for a multipart file upload.
   */
  async getUploadPart(
    requestParameters: GetUploadPartParams,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UploadPart> {
    const response = await this.getUploadPartWithHttpInfo(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Lists the remaining upload parts for a multipart file upload.  An empty array is returned when the upload is complete.
   */
  private async listUploadPartsWithHttpInfo(
    requestParameters: ListUploadPartsParams,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UploadPartList>> {
    if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling listUploadParts."
      );
    }

    if (requestParameters.uploadId === null || requestParameters.uploadId === undefined) {
      throw new runtime.RequiredError(
        "uploadId",
        "Required parameter requestParameters.uploadId was null or undefined when calling listUploadParts."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authorization-header authentication
    }

    const operationBasePathOverride = [][0];

    const response = await this.request(
      {
        path: `/v2/accounts/{accountId}/uploads/{uploadId}/parts`
          .replace(
            `{${"accountId"}}`,
            // @ts-ignore
            "accountId" === "filePath"
              ? String(requestParameters.accountId).substr(1)
              : encodeURIComponent(String(requestParameters.accountId))
          )
          .replace(
            `{${"uploadId"}}`,
            // @ts-ignore
            "uploadId" === "filePath"
              ? String(requestParameters.uploadId).substr(1)
              : encodeURIComponent(String(requestParameters.uploadId))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides,
      operationBasePathOverride
    );

    return new runtime.JSONApiResponse(response);
  }

  /**
   * Lists the remaining upload parts for a multipart file upload.  An empty array is returned when the upload is complete.
   */
  async listUploadParts(
    requestParameters: ListUploadPartsParams,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UploadPartList> {
    const response = await this.listUploadPartsWithHttpInfo(requestParameters, initOverrides);
    return await response.value();
  }
}
