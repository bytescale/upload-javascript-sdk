/* tslint:disable */
/* eslint-disable */
/**
 * upload-api
 * Upload API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@upload.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// @ts-ignore
import { exists, mapValues } from "../runtime";

// @ts-ignore
import type { DynamicFilePath } from "./DynamicFilePath";
// @ts-ignore
import { DynamicFilePathFromJSON, DynamicFilePathToJSON } from "./DynamicFilePath";

/**
 * The path to upload the file to.
 * @export
 * @interface FilePathDefinition
 */
export interface FilePathDefinition {
  /**
   * File name. May be empty string `""`. Cannot contain `/`.
   * @type {string}
   * @memberof FilePathDefinition
   */
  fileName?: string;
  /**
   * If `true` then path variables like `{DATE_UTC}` in the `fileName` will be replaced. You can escape `{` characters with a `\`.
   *
   * If `false` then path variables like `{DATE_UTC}` in the `fileName` will be taken literally.
   *
   * Default: true
   * @type {boolean}
   * @memberof FilePathDefinition
   */
  fileNameVariablesEnabled?: boolean;
  /**
   * Absolute or relative path to a location in your Upload account's storage.
   * @type {string}
   * @memberof FilePathDefinition
   */
  folderPath?: string;
  /**
   * If `true` then path variables like `{DATE_UTC}` in the `folderPath` will be replaced. You can escape `{` characters with a `\`.
   *
   * If `false` then path variables like `{DATE_UTC}` in the `folderPath` will be taken literally.
   *
   * Default: true
   * @type {boolean}
   * @memberof FilePathDefinition
   */
  folderPathVariablesEnabled?: boolean;
}

export function FilePathDefinitionFromJSON(json: any): FilePathDefinition {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    fileName: !exists(json, "fileName") ? undefined : json["fileName"],
    fileNameVariablesEnabled: !exists(json, "fileNameVariablesEnabled") ? undefined : json["fileNameVariablesEnabled"],
    folderPath: !exists(json, "folderPath") ? undefined : json["folderPath"],
    folderPathVariablesEnabled: !exists(json, "folderPathVariablesEnabled")
      ? undefined
      : json["folderPathVariablesEnabled"]
  };
}

export function FilePathDefinitionToJSON(value?: FilePathDefinition | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    fileName: value.fileName,
    fileNameVariablesEnabled: value.fileNameVariablesEnabled,
    folderPath: value.folderPath,
    folderPathVariablesEnabled: value.folderPathVariablesEnabled
  };
}
