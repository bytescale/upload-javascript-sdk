/* tslint:disable */
/* eslint-disable */
/**
 * upload-api
 * Upload API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@upload.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// @ts-ignore
import { exists, mapValues } from "../runtime";

// @ts-ignore
import type { DeleteFolderScope } from "./DeleteFolderScope";
// @ts-ignore
import { DeleteFolderScopeFromJSON, DeleteFolderScopeToJSON } from "./DeleteFolderScope";

/**
 * Request body for DeleteFolder.
 * @export
 * @interface DeleteFolderRequest
 */
export interface DeleteFolderRequest {
  /**
   * Absolute path to a folder. Must begin with a `/`. Should not end with a `/`.
   * @type {string}
   * @memberof DeleteFolderRequest
   */
  folderPath: string;
  /**
   * If true, does not delete folder settings at the 'folderPath' or its descendants.
   *
   * Default: false
   * @type {boolean}
   * @memberof DeleteFolderRequest
   */
  retainFolderSettings?: boolean;
  /**
   *
   * @type {DeleteFolderScope}
   * @memberof DeleteFolderRequest
   */
  scope?: DeleteFolderScope;
}

export function DeleteFolderRequestFromJSON(json: any): DeleteFolderRequest {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    folderPath: json["folderPath"],
    retainFolderSettings: !exists(json, "retainFolderSettings") ? undefined : json["retainFolderSettings"],
    scope: !exists(json, "scope") ? undefined : DeleteFolderScopeFromJSON(json["scope"])
  };
}

export function DeleteFolderRequestToJSON(value?: DeleteFolderRequest | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    folderPath: value.folderPath,
    retainFolderSettings: value.retainFolderSettings,
    scope: DeleteFolderScopeToJSON(value.scope)
  };
}
