/* tslint:disable */
/* eslint-disable */
/**
 * upload-api
 * Upload API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@upload.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// @ts-ignore
import { exists, mapValues } from "../runtime";

/**
 * Storage layer used for serving files from external HTTP origins.
 *
 * This is a read-only storage layer.
 * @export
 * @interface WebStorage
 */
export interface WebStorage {
  /**
   * Base URL to proxy requests to. Should contain a trailing `/`.
   *
   * If `baseUrl` is set to `null`, then this folder will behave as an open reverse proxy.
   *
   * *Example 1:* if the `baseUrl` is `null` and the folder you're configuring the storage layer on is:
   *
   * `https://upcdn.io/abc1234/raw/demo`
   *
   * Then you can issue requests such as:
   *
   * `https://upcdn.io/abc1234/raw/demo/https://images.unsplash.com/example.jpg`
   *
   * *Example 2:* if the `baseUrl` is:
   *
   * `https://images.unsplash.com/`
   *
   * And the folder you're configuring the storage layer on is:
   *
   * `https://upcdn.io/abc1234/raw/demo`
   *
   * Then you can issue requests such as:
   *
   * `https://upcdn.io/abc1234/raw/demo/test/example.jpg`
   *
   * Which will be routed to the URL:
   *
   * `https://images.unsplash.com/test/example.jpg`
   * @type {string}
   * @memberof WebStorage
   */
  baseUrl: string | null;
  /**
   * The type of this storage layer.
   * @type {string}
   * @memberof WebStorage
   */
  type: WebStorageTypeEnum;
}

/**
 * @export
 */
export const WebStorageTypeEnum = {
  Web: "Web"
} as const;
export type WebStorageTypeEnum = typeof WebStorageTypeEnum[keyof typeof WebStorageTypeEnum];

export function WebStorageFromJSON(json: any): WebStorage {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    baseUrl: json["baseUrl"],
    type: json["type"]
  };
}

export function WebStorageToJSON(value?: WebStorage | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    baseUrl: value.baseUrl,
    type: value.type
  };
}
